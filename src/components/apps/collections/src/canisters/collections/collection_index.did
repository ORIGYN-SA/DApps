type Category = record { active : bool; name : text; collection_count : nat64 };
type Collection = record {
  name : opt text;
  canister_id : principal;
  is_promoted : bool;
  category : opt nat64;
};
type GetCollectionsArgs = record {
  categories : opt vec nat64;
  offset : nat64;
  limit : nat64;
};
type GetCollectionsError = variant { CategoryNotFound : text };
type GetCollectionsResult = record {
  total_pages : nat64;
  collections : vec Collection;
};
type InitArgs = record {
  test_mode : bool;
  authorized_principals : vec principal;
};
type InsertCategoryArgs = record { category_name : text };
type InsertCategoryError = variant { CategoryAlreadyExists };
type InsertCollectionArgs = record {
  is_promoted : bool;
  collection_canister_id : principal;
  category : nat64;
};
type InsertCollectionError = variant {
  GenericOrigynNftError : text;
  TargetCanisterIdNotOrigyn;
  CollectionAlreadyExists;
  CategoryNotFound : text;
};
type RemoveCollectionArgs = record { collection_canister_id : principal };
type RemoveCollectionError = variant { CollectionNotFound };
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : vec record { nat64; Category }; Err };
type Result_2 = variant {
  Ok : GetCollectionsResult;
  Err : GetCollectionsError;
};
type Result_3 = variant { Ok; Err : InsertCategoryError };
type Result_4 = variant { Ok; Err : InsertCollectionError };
type Result_5 = variant { Ok; Err : RemoveCollectionError };
type Result_6 = variant { Ok; Err : SetCategoryVisibilityError };
type Result_7 = variant { Ok; Err : UpdateCollectionCategoryError };
type SearchCollectionsArg = record {
  categories : opt vec nat64;
  search_string : text;
  offset : nat64;
  limit : nat64;
};
type SetCategoryVisibility = record { hidden : bool; category_id : nat64 };
type SetCategoryVisibilityError = variant { CategoryNotFound };
type UpdateCollectionCategoryArgs = record {
  collection_canister_id : principal;
  category_id : nat64;
};
type UpdateCollectionCategoryError = variant {
  CollectionNotFound;
  CategoryNotFound : text;
};
service : (InitArgs) -> {
  add_authorised_principal : (principal) -> (Result);
  get_categories : () -> (Result_1) query;
  get_collections : (GetCollectionsArgs) -> (Result_2) query;
  get_user_collections : (opt principal) -> (vec Collection);
  insert_category : (InsertCategoryArgs) -> (Result_3);
  insert_collection : (InsertCollectionArgs) -> (Result_4);
  remove_collection : (RemoveCollectionArgs) -> (Result_5);
  search_collections : (SearchCollectionsArg) -> (GetCollectionsResult) query;
  set_category_visibility : (SetCategoryVisibility) -> (Result_6);
  update_collection_category : (UpdateCollectionCategoryArgs) -> (Result_7);
}
